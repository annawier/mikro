setwd("C:/Users/kostoj/Documents/Professional_documentation/EDUCATION/Mikroekonometria/db")
# ZMIENIECIE wd pod siebie. 
#Musi tam być plik z bazą sqlite wtedy dziala wszystko


#Wczytanie Bazy SQLIte#####

install.packages("RSQLite")
library(RSQLite)
# Create an ephemeral RSQLite database
con <- dbConnect(RSQLite::SQLite(), dbname="database.sqlite")

dbListTables(con)
## list all tables
tables <- dbListTables(con)

## exclude sqlite_sequence (contains table information)
tables <- tables[tables != "sqlite_sequence"]

data.class(tables)

lDataFrames <- vector("list", length=length(tables))

data.class(lDataFrames)

## create a data.frame for each table
for (i in seq(along=tables)) {
  lDataFrames[[i]] <- dbGetQuery(conn=con, statement=paste("SELECT * FROM '", tables[[i]], "'", sep=""))
}

names(lDataFrames)<-tables

lDataFrames$Match

#Tutaj bardzo luzne sprawdzanie mozecie usunać

unique(lDataFrames[["Match"]]["shoton"])
hist(lDataFrames[["Match"]]["shoton"])

summary(lDataFrames[["Match"]]["home_player_3"])
summary(lDataFrames[["Match"]]["shoton"])

lDataFrames$Match[lDataFrames[["Match"]]["id"]==1000,]





###KO


colnames(lDataFrames$Match)
#aby przejść do sql - osobne tabele
sd_match <- lDataFrames$Match

library(sqldf)
#ograniczenie zbioru danych
sd_match_def <- sqldf("SELECT id, country_id, league_id, season, stage, date as match_date, match_api_id, 
                      home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, 
                      goal, shoton, shotoff, foulcommit, card, cross, corner, possession
                      from sd_match")

away_result <- ifelse(sd_match_def$away_team_goal < sd_match_def$home_team_goal, "lost", 
                      ifelse(sd_match_def$away_team_goal > sd_match_def$home_team_goal, "won", "nil"))

home_result <- ifelse(sd_match_def$away_team_goal < sd_match_def$home_team_goal, "won", 
                      ifelse(sd_match_def$away_team_goal > sd_match_def$home_team_goal, "lost", "nil"))

sd_match_def <- cbind(sd_match_def, away_result, home_result)
  
sd_team_attr <- lDataFrames$Team_Attributes
sd_team_attr_def <- sqldf("SELECT team_fifa_api_id, team_api_id,                   
                          date, buildUpPlaySpeed, buildUpPlaySpeedClass,          
                          buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing,             
                          buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, 
                          chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, 
                          chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass,
                          defencePressure, defencePressureClass, defenceAggression,              
                          defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, 
                          defenceDefenderLineClass
                      from sd_team_attr")

sd_glm <- sqldf("
                SELECT id, 
                  country_id, league_id, season, stage, match_date, match_api_id, home_result result,
                  'home' as home_or_away, home_team_api_id as team_api_id, home_team_goal goals,
                  goal, shoton, shotoff, foulcommit, card, cross, corner, possession
                  from sd_match_def
                UNION ALL
                SELECT id, 
                  country_id, league_id, season, stage, match_date, match_api_id, away_result result,
                  'away' as home_or_away, away_team_api_id as team_api_id, away_team_goal goals,
                  goal, shoton, shotoff, foulcommit, card, cross, corner, possession
                  from sd_match_def
                ")


nrow(sd_glm) #51958
nrow(sd_team_attr_def) #1458

#nie łączymy bo brak unikalnego identyfikatora
#sd_glm_2 <- merge(x=sd_glm, y=sd_team_attr_def, by="team_api_id", all.x=TRUE )
#nrow(sd_glm_2) #284549

library(dplyr)
library(plyr)
head(sd_team_attr_def)
data$ID <- seq.int(nrow(data))
sd_team_attr_def <- sd_team_attr_def[sd_team_attr_def$id = '861',]

data.class(sd_team_attr_def$id)

sd_team_attr_def[sd_team_attr_def$Variable1!=11 & X$Variable1!=12, ]

head(sd_team_attr_def)

sd_team_attr_def<-transform(sd_team_attr_def, Rank = ave (date, team_api_id, 
                                        FUN = function(x) rank (x, ties.method ="min")))

sd_team_attr_def_dates <- sqldf("select a.*, b.date date_end
from sd_team_attr_def a
left join sd_team_attr_def b
on a.rank=b.rank-1 and a.team_api_id=b.team_api_id" 
)

library(xlsx)
write.xlsx(sd_team_attr_def_dates, "C:/Users/kostoj/Documents/Professional_documentation/EDUCATION/Mikroekonometria/db/aa.xlsx")

sd_glm_merged <- sqldf("select a.*, b.*
from sd_glm a
left join sd_team_attr_def_2 b
on a.team_api_id=b.team_api_id 
    and a.match_date between b.date and b.date_end" )

head(sd_glm_merged)

nrow(sd_glm)
nrow(sd_glm_merged) ##usunąć duplikaty z sd_glm_merged


# wstepna analiza
library(nnet)
model_1 <- multinom(result ~ home_or_away, data=sd_glm_merged); msat
